daijiro 8089 0.0 0.0 2684 1068 pts/8 S+ 21:47 0:00 ./fork 
daijiro 8151 0.0 0.0 2684 104 pts/8 S+ 21:47 0:00 ./fork

daijiro: プロセスを実行しているユーザー名
8089 と 8151: プロセスID (PID)
0.0 0.0: CPU使用率とメモリ使用率
2684: プロセスの仮想メモリサイズ（KB単位）
1068 と 104: プロセスの物理メモリ使用量（KB単位）
pts/8: プロセスが関連付けられている端末
S+: プロセスの状態（Sはスリープ状態、+はフォアグラウンドプロセス）
21:47: プロセスの開始時刻
0:00: プロセスが使用したCPU時間
./fork: 実行されたコマンド
この場合、./forkというプログラムが2つのプロセスとして実行されています。これは、fork()システムコールによって親プロセス（PID 8089）が子プロセス（PID 8151）を生成したためです。

wait(&status);
具体的には、wait(&status);の&statusは、status変数のメモリアドレスを取得しています。これにより、wait関数はstatus変数のアドレスを引数として受け取り、そのアドレスに子プロセスの終了ステータスを格納することができます。
